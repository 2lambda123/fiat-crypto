     = fun
         x xHigh RegMuLow scratchp scratchp0 scratchp1 scratchp2
          scratchp3 : register =>
       let q1Bottom := scratchp in
       let muSelect := scratchp0 in
       let q := scratchp1 in
       let q2High := scratchp2 in
       let q2High0 := scratchp3 in
       let q0 := scratchp in
       let r := scratchp0 in
       let r2High := scratchp1 in
       let maybeM := scratchp in
       SELM muSelect RegMuLow RegZero;
       RSHI 255 q1Bottom xHigh x;
       MUL128LL q q1Bottom RegMuLow;
       MUL128UU q2High q1Bottom RegMuLow;
       MUL128UL scratchp3 q1Bottom RegMuLow;
       ADD 128 q q scratchp3;
       ADDC (-128) q2High q2High scratchp3;
       MUL128LU scratchp3 q1Bottom RegMuLow;
       ADD 128 q q scratchp3;
       ADDC (-128) q2High q2High scratchp3;
       RSHI 255 q2High0 RegZero xHigh;
       ADD 0 q2High q2High q1Bottom;
       ADDC 0 q2High0 q2High0 RegZero;
       ADD 0 q2High q2High muSelect;
       ADDC 0 q2High0 q2High0 RegZero;
       RSHI 1 q0 q2High0 q2High;
       MUL128LL r RegMod q0;
       MUL128UU r2High RegMod q0;
       MUL128UL scratchp2 RegMod q0;
       ADD 128 r r scratchp2;
       ADDC (-128) r2High r2High scratchp2;
       MUL128LU scratchp2 RegMod q0;
       ADD 128 r r scratchp2;
       ADDC (-128) r2High r2High scratchp2;
       SUB 0 muSelect x r;
       SUBC 0 xHigh xHigh r2High;
       SELL maybeM RegMod RegZero;
       SUB 0 q0 muSelect maybeM;
       ADDM x q0 RegZero RegMod;
       Ret x
     : forall
         x xHigh RegMuLow scratchp scratchp0 scratchp1 scratchp2
          scratchp3 : register, expr
