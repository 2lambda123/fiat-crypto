λ x : word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint32_t x12, uint8_t/*bool*/ x13 = subborrow_u26(0x0, x2, 0x3ffffef);
 uint32_t x15, uint8_t/*bool*/ x16 = subborrow_u25(x13, x4, 0x1ffffff);
 uint32_t x18, uint8_t/*bool*/ x19 = subborrow_u25(x16, x6, 0x1ffffff);
 uint32_t x21, uint8_t/*bool*/ x22 = subborrow_u26(x19, x8, 0x3ffffff);
 uint32_t x24, uint8_t/*bool*/ x25 = subborrow_u25(x22, x10, 0x1ffffff);
 uint32_t x27, uint8_t/*bool*/ x28 = subborrow_u25(x25, x9, 0x1ffffff);
 uint32_t x29 = cmovznz32(x28, 0x0, 0xffffffff);
 uint32_t x30 = (x29 & 0x3ffffef);
 uint32_t x32, uint8_t/*bool*/ x33 = addcarryx_u26(0x0, x12, x30);
 uint32_t x34 = (x29 & 0x1ffffff);
 uint32_t x36, uint8_t/*bool*/ x37 = addcarryx_u25(x33, x15, x34);
 uint32_t x38 = (x29 & 0x1ffffff);
 uint32_t x40, uint8_t/*bool*/ x41 = addcarryx_u25(x37, x18, x38);
 uint32_t x42 = (x29 & 0x3ffffff);
 uint32_t x44, uint8_t/*bool*/ x45 = addcarryx_u26(x41, x21, x42);
 uint32_t x46 = (x29 & 0x1ffffff);
 uint32_t x48, uint8_t/*bool*/ x49 = addcarryx_u25(x45, x24, x46);
 uint32_t x50 = (x29 & 0x1ffffff);
 uint32_t x52, uint8_t/*bool*/ _ = addcarryx_u25(x49, x27, x50);
 (Return x52, Return x48, Return x44, Return x40, Return x36, Return x32))
x
     : word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
