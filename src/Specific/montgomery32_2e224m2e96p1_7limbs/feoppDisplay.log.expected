λ x : word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x11, x12, x10, x8, x6, x4, x2)%core,
 uint32_t x14, uint8_t/*bool*/ x15 = subborrow_u32(0x0, 0x0, x2);
 uint32_t x17, uint8_t/*bool*/ x18 = subborrow_u32(x15, 0x0, x4);
 uint32_t x20, uint8_t/*bool*/ x21 = subborrow_u32(x18, 0x0, x6);
 uint32_t x23, uint8_t/*bool*/ x24 = subborrow_u32(x21, 0x0, x8);
 uint32_t x26, uint8_t/*bool*/ x27 = subborrow_u32(x24, 0x0, x10);
 uint32_t x29, uint8_t/*bool*/ x30 = subborrow_u32(x27, 0x0, x12);
 uint32_t x32, uint8_t/*bool*/ x33 = subborrow_u32(x30, 0x0, x11);
 uint32_t x34 = cmovznz32(x33, 0x0, 0xffffffff);
 uint8_t/*bool*/ x35 = (1&(uint8_t/*bool*/)x34 & 0x1);
 uint32_t x37, uint8_t/*bool*/ x38 = addcarryx_u32(0x0, x14, x35);
 uint32_t x40, uint8_t/*bool*/ x41 = addcarryx_u32(x38, x17, 0x0);
 uint32_t x43, uint8_t/*bool*/ x44 = addcarryx_u32(x41, x20, 0x0);
 uint32_t x45 = (x34 & 0xffffffff);
 uint32_t x47, uint8_t/*bool*/ x48 = addcarryx_u32(x44, x23, x45);
 uint32_t x49 = (x34 & 0xffffffff);
 uint32_t x51, uint8_t/*bool*/ x52 = addcarryx_u32(x48, x26, x49);
 uint32_t x53 = (x34 & 0xffffffff);
 uint32_t x55, uint8_t/*bool*/ x56 = addcarryx_u32(x52, x29, x53);
 uint32_t x57 = (x34 & 0xffffffff);
 uint32_t x59, uint8_t/*bool*/ _ = addcarryx_u32(x56, x32, x57);
 (Return x59, Return x55, Return x51, Return x47, Return x43, Return x40, Return x37))
x
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
