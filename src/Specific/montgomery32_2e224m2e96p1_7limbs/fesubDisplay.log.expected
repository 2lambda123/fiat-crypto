λ x x0 : word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x14, x15, x13, x11, x9, x7, x5, (x26, x27, x25, x23, x21, x19, x17))%core,
 uint32_t x29, uint8_t/*bool*/ x30 = subborrow_u32(0x0, x5, x17);
 uint32_t x32, uint8_t/*bool*/ x33 = subborrow_u32(x30, x7, x19);
 uint32_t x35, uint8_t/*bool*/ x36 = subborrow_u32(x33, x9, x21);
 uint32_t x38, uint8_t/*bool*/ x39 = subborrow_u32(x36, x11, x23);
 uint32_t x41, uint8_t/*bool*/ x42 = subborrow_u32(x39, x13, x25);
 uint32_t x44, uint8_t/*bool*/ x45 = subborrow_u32(x42, x15, x27);
 uint32_t x47, uint8_t/*bool*/ x48 = subborrow_u32(x45, x14, x26);
 uint32_t x49 = cmovznz32(x48, 0x0, 0xffffffff);
 uint8_t/*bool*/ x50 = (1&(uint8_t/*bool*/)x49 & 0x1);
 uint32_t x52, uint8_t/*bool*/ x53 = addcarryx_u32(0x0, x29, x50);
 uint32_t x55, uint8_t/*bool*/ x56 = addcarryx_u32(x53, x32, 0x0);
 uint32_t x58, uint8_t/*bool*/ x59 = addcarryx_u32(x56, x35, 0x0);
 uint32_t x60 = (x49 & 0xffffffff);
 uint32_t x62, uint8_t/*bool*/ x63 = addcarryx_u32(x59, x38, x60);
 uint32_t x64 = (x49 & 0xffffffff);
 uint32_t x66, uint8_t/*bool*/ x67 = addcarryx_u32(x63, x41, x64);
 uint32_t x68 = (x49 & 0xffffffff);
 uint32_t x70, uint8_t/*bool*/ x71 = addcarryx_u32(x67, x44, x68);
 uint32_t x72 = (x49 & 0xffffffff);
 uint32_t x74, uint8_t/*bool*/ _ = addcarryx_u32(x71, x47, x72);
 (Return x74, Return x70, Return x66, Return x62, Return x58, Return x55, Return x52))
(x, x0)%core
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 → word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
