λ x : word64 * word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x11, x12, x10, x8, x6, x4, x2)%core,
 uint64_t x13 = (x2 >> 0x30);
 uint64_t x14 = (x2 & 0xffffffffffff);
 uint64_t x15 = (x13 + x4);
 uint64_t x16 = (x15 >> 0x30);
 uint64_t x17 = (x15 & 0xffffffffffff);
 uint64_t x18 = (x16 + x6);
 uint64_t x19 = (x18 >> 0x30);
 uint64_t x20 = (x18 & 0xffffffffffff);
 uint64_t x21 = (x19 + x8);
 uint64_t x22 = (x21 >> 0x30);
 uint64_t x23 = (x21 & 0xffffffffffff);
 uint64_t x24 = (x22 + x10);
 uint64_t x25 = (x24 >> 0x30);
 uint64_t x26 = (x24 & 0xffffffffffff);
 uint64_t x27 = (x25 + x12);
 uint64_t x28 = (x27 >> 0x30);
 uint64_t x29 = (x27 & 0xffffffffffff);
 uint64_t x30 = (x28 + x11);
 uint64_t x31 = (x30 >> 0x30);
 uint64_t x32 = (x30 & 0xffffffffffff);
 uint64_t x33 = (x14 + (0x3 * x31));
 uint64_t x34 = (x33 >> 0x30);
 uint64_t x35 = (x33 & 0xffffffffffff);
 uint64_t x36 = (x34 + x17);
 uint64_t x37 = (x36 >> 0x30);
 uint64_t x38 = (x36 & 0xffffffffffff);
 return (Return x32, Return x29, Return x26, Return x23, (x37 + x20), Return x38, Return x35))
x
     : word64 * word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
