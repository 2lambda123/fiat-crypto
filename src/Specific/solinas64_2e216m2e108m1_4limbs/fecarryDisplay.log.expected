λ x : word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x5, x6, x4, x2)%core,
 uint64_t x7 = (x4 >> 0x36);
 uint64_t x8 = (x4 & 0x3fffffffffffff);
 uint64_t x9 = (x5 >> 0x36);
 uint64_t x10 = (x5 & 0x3fffffffffffff);
 uint64_t x11 = ((0x40000000000000 * x9) + x10);
 uint64_t x12 = (x11 >> 0x36);
 uint64_t x13 = (x11 & 0x3fffffffffffff);
 uint64_t x14 = ((x7 + x6) + x12);
 uint64_t x15 = (x14 >> 0x36);
 uint64_t x16 = (x14 & 0x3fffffffffffff);
 uint64_t x17 = (x2 + x12);
 uint64_t x18 = (x17 >> 0x36);
 uint64_t x19 = (x17 & 0x3fffffffffffff);
 uint64_t x20 = (x15 + x13);
 uint64_t x21 = (x20 >> 0x36);
 uint64_t x22 = (x20 & 0x3fffffffffffff);
 uint64_t x23 = (x18 + x8);
 uint64_t x24 = (x23 >> 0x36);
 uint64_t x25 = (x23 & 0x3fffffffffffff);
 uint64_t x26 = ((0x40000000000000 * x21) + x22);
 uint64_t x27 = (x26 >> 0x36);
 uint64_t x28 = (x26 & 0x3fffffffffffff);
 uint64_t x29 = ((x24 + x16) + x27);
 uint64_t x30 = (x29 >> 0x36);
 uint64_t x31 = (x29 & 0x3fffffffffffff);
 uint64_t x32 = (x19 + x27);
 uint64_t x33 = (x32 >> 0x36);
 uint64_t x34 = (x32 & 0x3fffffffffffff);
 return ((x30 + x28), Return x31, (x33 + x25), Return x34))
x
     : word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t)
