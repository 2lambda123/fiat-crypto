λ x : word64 * word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint64_t x11 = (x6 >> 0x35);
 uint64_t x12 = (x6 & 0x1fffffffffffff);
 uint64_t x13 = (x9 >> 0x35);
 uint64_t x14 = (x9 & 0x1fffffffffffff);
 uint64_t x15 = ((0x20000000000000 * x13) + x14);
 uint64_t x16 = (x15 >> 0x35);
 uint64_t x17 = (x15 & 0x1fffffffffffff);
 uint64_t x18 = ((x11 + x8) + x16);
 uint64_t x19 = (x18 >> 0x36);
 uint64_t x20 = (x18 & 0x3fffffffffffff);
 uint64_t x21 = (x2 + x16);
 uint64_t x22 = (x21 >> 0x36);
 uint64_t x23 = (x21 & 0x3fffffffffffff);
 uint64_t x24 = (x19 + x10);
 uint64_t x25 = (x24 >> 0x36);
 uint64_t x26 = (x24 & 0x3fffffffffffff);
 uint64_t x27 = (x22 + x4);
 uint64_t x28 = (x27 >> 0x36);
 uint64_t x29 = (x27 & 0x3fffffffffffff);
 uint64_t x30 = (x25 + x17);
 uint64_t x31 = (x30 >> 0x35);
 uint64_t x32 = (x30 & 0x1fffffffffffff);
 uint64_t x33 = (x28 + x12);
 uint64_t x34 = (x33 >> 0x35);
 uint64_t x35 = (x33 & 0x1fffffffffffff);
 uint64_t x36 = ((0x20000000000000 * x31) + x32);
 uint64_t x37 = (x36 >> 0x35);
 uint64_t x38 = (x36 & 0x1fffffffffffff);
 uint64_t x39 = ((x34 + x20) + x37);
 uint64_t x40 = (x39 >> 0x36);
 uint64_t x41 = (x39 & 0x3fffffffffffff);
 uint64_t x42 = (x23 + x37);
 uint64_t x43 = (x42 >> 0x36);
 uint64_t x44 = (x42 & 0x3fffffffffffff);
 return (Return x38, (x40 + x26), Return x41, Return x35, (x43 + x29), Return x44))
x
     : word64 * word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
