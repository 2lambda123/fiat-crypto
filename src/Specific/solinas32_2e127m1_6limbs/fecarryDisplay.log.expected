λ x : word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x9, x10, x8, x6, x4, x2)%core,
 uint32_t x11 = (x2 >> 0x16);
 uint32_t x12 = (x2 & 0x3fffff);
 uint32_t x13 = (x11 + x4);
 uint32_t x14 = (x13 >> 0x15);
 uint32_t x15 = (x13 & 0x1fffff);
 uint32_t x16 = (x14 + x6);
 uint32_t x17 = (x16 >> 0x15);
 uint32_t x18 = (x16 & 0x1fffff);
 uint32_t x19 = (x17 + x8);
 uint32_t x20 = (x19 >> 0x15);
 uint32_t x21 = (x19 & 0x1fffff);
 uint32_t x22 = (x20 + x10);
 uint32_t x23 = (x22 >> 0x15);
 uint32_t x24 = (x22 & 0x1fffff);
 uint32_t x25 = (x23 + x9);
 uint32_t x26 = (x25 >> 0x15);
 uint32_t x27 = (x25 & 0x1fffff);
 uint32_t x28 = (x12 + x26);
 uint32_t x29 = (x28 >> 0x16);
 uint32_t x30 = (x28 & 0x3fffff);
 uint32_t x31 = (x29 + x15);
 uint32_t x32 = (x31 >> 0x15);
 uint32_t x33 = (x31 & 0x1fffff);
 return (Return x27, Return x24, Return x21, (x32 + x18), Return x33, Return x30))
x
     : word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
