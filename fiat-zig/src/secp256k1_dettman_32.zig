// Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --lang Zig --internal-static --public-function-case camelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case UpperCamelCase --no-prefix-fiat --package-name secp256k1_dettman '' 32 10 22 '2^256 - 4294968273' mul32 square32
// curve description (via package name): secp256k1_dettman
// machine_wordsize = 32 (from "32")
// requested operations: mul32, square32
// n = 10 (from "10")
// last_limb_width = 22 (from "22")
// s-c = 2^256 - [(1, 4294968273)] (from "2^256 - 4294968273")
// inbounds_multiplier: None (from "")
//
// Computed values:
//
//

const std = @import("std");
const mode = @import("builtin").mode; // Checked arithmetic is disabled in non-debug modes to avoid side channels

inline fn cast(comptime DestType: type, target: anytype) DestType {
    @setEvalBranchQuota(10000);
    if (@typeInfo(@TypeOf(target)) == .Int) {
        const dest = @typeInfo(DestType).Int;
        const source = @typeInfo(@TypeOf(target)).Int;
        if (dest.bits < source.bits) {
            return @bitCast(DestType, @truncate(std.meta.Int(source.signedness, dest.bits), target));
        } else {
            return @bitCast(DestType, @as(std.meta.Int(source.signedness, dest.bits), target));
        }
    }
    return @as(DestType, target);
}

/// The function mul32 multiplies two field elements.
///
/// Postconditions:
///   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
///   arg2: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
pub fn mul32(out1: *[10]u32, arg1: [10]u32, arg2: [10]u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((cast(u64, (arg1[8])) * cast(u64, (arg2[9]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[8]))));
    const x2 = cast(u32, (x1 >> 26));
    const x3 = cast(u32, (x1 & cast(u64, 0x3ffffff)));
    const x4 = (((cast(u64, (arg1[0])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[7])) * cast(u64, (arg2[0])))))))))) + (cast(u64, x3) * cast(u64, 0x3d10)));
    const x5 = cast(u32, (x4 >> 26));
    const x6 = cast(u32, (x4 & cast(u64, 0x3ffffff)));
    const x7 = (cast(u64, x2) + (cast(u64, (arg1[9])) * cast(u64, (arg2[9]))));
    const x8 = cast(u32, (x7 >> 32));
    const x9 = ((cast(u64, x5) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[8])) * cast(u64, (arg2[0]))))))))))) + (cast(u64, x3) << 10))) + (cast(u64, cast(u32, x7)) * cast(u64, 0x3d10)));
    const x10 = cast(u32, (x9 >> 26));
    const x11 = cast(u32, (x9 & cast(u64, 0x3ffffff)));
    const x12 = ((cast(u64, x10) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[0])))))))))))) + (cast(u64, cast(u32, x7)) << 10))) + (cast(u64, x8) * cast(u64, 0xf4400)));
    const x13 = cast(u32, (x12 >> 26));
    const x14 = cast(u32, (x12 & cast(u64, 0x3ffffff)));
    const x15 = (x14 >> 22);
    const x16 = (x14 & 0x3fffff);
    const x17 = (cast(u64, x13) + (((cast(u64, (arg1[1])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[2]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[1]))))))))))) + cast(u64, (x8 << 16))));
    const x18 = cast(u32, (x17 >> 26));
    const x19 = cast(u32, (x17 & cast(u64, 0x3ffffff)));
    const x20 = ((cast(u64, (arg1[0])) * cast(u64, (arg2[0]))) + (cast(u64, (x15 + (x19 << 4))) * cast(u64, 0x3d1)));
    const x21 = cast(u32, (x20 >> 26));
    const x22 = cast(u32, (x20 & cast(u64, 0x3ffffff)));
    const x23 = (cast(u64, x18) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[3]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[2])))))))))));
    const x24 = cast(u32, (x23 >> 26));
    const x25 = cast(u32, (x23 & cast(u64, 0x3ffffff)));
    const x26 = ((cast(u64, x21) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[1])) * cast(u64, (arg2[0])))) + (cast(u64, (x15 + (x19 << 4))) << 6))) + (cast(u64, x25) * cast(u64, 0x3d10)));
    const x27 = cast(u32, (x26 >> 26));
    const x28 = cast(u32, (x26 & cast(u64, 0x3ffffff)));
    const x29 = (cast(u64, x24) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[4]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[3]))))))))));
    const x30 = cast(u32, (x29 >> 26));
    const x31 = cast(u32, (x29 & cast(u64, 0x3ffffff)));
    const x32 = ((cast(u64, x27) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[2])) * cast(u64, (arg2[0]))))) + (cast(u64, x25) << 10))) + (cast(u64, x31) * cast(u64, 0x3d10)));
    const x33 = cast(u32, (x32 >> 26));
    const x34 = cast(u32, (x32 & cast(u64, 0x3ffffff)));
    const x35 = (cast(u64, x30) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[5]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[4])))))))));
    const x36 = cast(u32, (x35 >> 26));
    const x37 = cast(u32, (x35 & cast(u64, 0x3ffffff)));
    const x38 = ((cast(u64, x33) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[3])) * cast(u64, (arg2[0])))))) + (cast(u64, x31) << 10))) + (cast(u64, x37) * cast(u64, 0x3d10)));
    const x39 = cast(u32, (x38 >> 26));
    const x40 = cast(u32, (x38 & cast(u64, 0x3ffffff)));
    const x41 = (cast(u64, x36) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[7]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[6]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[5]))))))));
    const x42 = cast(u32, (x41 >> 26));
    const x43 = cast(u32, (x41 & cast(u64, 0x3ffffff)));
    const x44 = ((cast(u64, x39) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[4])) * cast(u64, (arg2[0]))))))) + (cast(u64, x37) << 10))) + (cast(u64, x43) * cast(u64, 0x3d10)));
    const x45 = cast(u32, (x44 >> 26));
    const x46 = cast(u32, (x44 & cast(u64, 0x3ffffff)));
    const x47 = (cast(u64, x42) + ((cast(u64, (arg1[6])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[8]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[7]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[6])))))));
    const x48 = cast(u32, (x47 >> 26));
    const x49 = cast(u32, (x47 & cast(u64, 0x3ffffff)));
    const x50 = ((cast(u64, x45) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[5])) * cast(u64, (arg2[0])))))))) + (cast(u64, x43) << 10))) + (cast(u64, x49) * cast(u64, 0x3d10)));
    const x51 = cast(u32, (x50 >> 26));
    const x52 = cast(u32, (x50 & cast(u64, 0x3ffffff)));
    const x53 = (cast(u64, x48) + ((cast(u64, (arg1[7])) * cast(u64, (arg2[9]))) + ((cast(u64, (arg1[8])) * cast(u64, (arg2[8]))) + (cast(u64, (arg1[9])) * cast(u64, (arg2[7]))))));
    const x54 = cast(u32, (x53 >> 32));
    const x55 = ((cast(u64, x51) + (((cast(u64, (arg1[0])) * cast(u64, (arg2[6]))) + ((cast(u64, (arg1[1])) * cast(u64, (arg2[5]))) + ((cast(u64, (arg1[2])) * cast(u64, (arg2[4]))) + ((cast(u64, (arg1[3])) * cast(u64, (arg2[3]))) + ((cast(u64, (arg1[4])) * cast(u64, (arg2[2]))) + ((cast(u64, (arg1[5])) * cast(u64, (arg2[1]))) + (cast(u64, (arg1[6])) * cast(u64, (arg2[0]))))))))) + (cast(u64, x49) << 10))) + (cast(u64, cast(u32, x53)) * cast(u64, 0x3d10)));
    const x56 = cast(u32, (x55 >> 26));
    const x57 = cast(u32, (x55 & cast(u64, 0x3ffffff)));
    const x58 = ((cast(u64, x56) + (cast(u64, x6) + (cast(u64, cast(u32, x53)) << 10))) + (cast(u64, x54) * cast(u64, 0xf4400)));
    const x59 = cast(u32, (x58 >> 26));
    const x60 = cast(u32, (x58 & cast(u64, 0x3ffffff)));
    const x61 = (cast(u64, x59) + (cast(u64, x11) + (cast(u64, x54) << 16)));
    const x62 = cast(u32, (x61 >> 26));
    const x63 = cast(u32, (x61 & cast(u64, 0x3ffffff)));
    const x64 = (x62 + x16);
    out1[0] = x22;
    out1[1] = x28;
    out1[2] = x34;
    out1[3] = x40;
    out1[4] = x46;
    out1[5] = x52;
    out1[6] = x57;
    out1[7] = x60;
    out1[8] = x63;
    out1[9] = x64;
}

/// The function square32 squares a field element.
///
/// Postconditions:
///   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
pub fn square32(out1: *[10]u32, arg1: [10]u32) void {
    @setRuntimeSafety(mode == .Debug);

    const x1 = ((arg1[8]) * 0x2);
    const x2 = ((arg1[7]) * 0x2);
    const x3 = ((arg1[6]) * 0x2);
    const x4 = ((arg1[5]) * 0x2);
    const x5 = ((arg1[4]) * 0x2);
    const x6 = ((arg1[3]) * 0x2);
    const x7 = ((arg1[2]) * 0x2);
    const x8 = ((arg1[1]) * 0x2);
    const x9 = ((arg1[0]) * 0x2);
    const x10 = (cast(u64, x1) * cast(u64, (arg1[9])));
    const x11 = cast(u32, (x10 >> 26));
    const x12 = cast(u32, (x10 & cast(u64, 0x3ffffff)));
    const x13 = (((cast(u64, x9) * cast(u64, (arg1[7]))) + ((cast(u64, x8) * cast(u64, (arg1[6]))) + ((cast(u64, x7) * cast(u64, (arg1[5]))) + (cast(u64, x6) * cast(u64, (arg1[4])))))) + (cast(u64, x12) * cast(u64, 0x3d10)));
    const x14 = cast(u32, (x13 >> 26));
    const x15 = cast(u32, (x13 & cast(u64, 0x3ffffff)));
    const x16 = (cast(u64, x11) + (cast(u64, (arg1[9])) * cast(u64, (arg1[9]))));
    const x17 = cast(u32, (x16 >> 32));
    const x18 = ((cast(u64, x14) + (((cast(u64, x9) * cast(u64, (arg1[8]))) + ((cast(u64, x8) * cast(u64, (arg1[7]))) + ((cast(u64, x7) * cast(u64, (arg1[6]))) + ((cast(u64, x6) * cast(u64, (arg1[5]))) + (cast(u64, (arg1[4])) * cast(u64, (arg1[4]))))))) + (cast(u64, x12) << 10))) + (cast(u64, cast(u32, x16)) * cast(u64, 0x3d10)));
    const x19 = cast(u32, (x18 >> 26));
    const x20 = cast(u32, (x18 & cast(u64, 0x3ffffff)));
    const x21 = ((cast(u64, x19) + (((cast(u64, x9) * cast(u64, (arg1[9]))) + ((cast(u64, x8) * cast(u64, (arg1[8]))) + ((cast(u64, x7) * cast(u64, (arg1[7]))) + ((cast(u64, x6) * cast(u64, (arg1[6]))) + (cast(u64, x5) * cast(u64, (arg1[5]))))))) + (cast(u64, cast(u32, x16)) << 10))) + (cast(u64, x17) * cast(u64, 0xf4400)));
    const x22 = cast(u32, (x21 >> 26));
    const x23 = cast(u32, (x21 & cast(u64, 0x3ffffff)));
    const x24 = (x23 >> 22);
    const x25 = (x23 & 0x3fffff);
    const x26 = (cast(u64, x22) + (((cast(u64, x8) * cast(u64, (arg1[9]))) + ((cast(u64, x7) * cast(u64, (arg1[8]))) + ((cast(u64, x6) * cast(u64, (arg1[7]))) + ((cast(u64, x5) * cast(u64, (arg1[6]))) + (cast(u64, (arg1[5])) * cast(u64, (arg1[5]))))))) + cast(u64, (x17 << 16))));
    const x27 = cast(u32, (x26 >> 26));
    const x28 = cast(u32, (x26 & cast(u64, 0x3ffffff)));
    const x29 = ((cast(u64, (arg1[0])) * cast(u64, (arg1[0]))) + (cast(u64, (x24 + (x28 << 4))) * cast(u64, 0x3d1)));
    const x30 = cast(u32, (x29 >> 26));
    const x31 = cast(u32, (x29 & cast(u64, 0x3ffffff)));
    const x32 = (cast(u64, x27) + ((cast(u64, x7) * cast(u64, (arg1[9]))) + ((cast(u64, x6) * cast(u64, (arg1[8]))) + ((cast(u64, x5) * cast(u64, (arg1[7]))) + (cast(u64, x4) * cast(u64, (arg1[6])))))));
    const x33 = cast(u32, (x32 >> 26));
    const x34 = cast(u32, (x32 & cast(u64, 0x3ffffff)));
    const x35 = ((cast(u64, x30) + ((cast(u64, x9) * cast(u64, (arg1[1]))) + (cast(u64, (x24 + (x28 << 4))) << 6))) + (cast(u64, x34) * cast(u64, 0x3d10)));
    const x36 = cast(u32, (x35 >> 26));
    const x37 = cast(u32, (x35 & cast(u64, 0x3ffffff)));
    const x38 = (cast(u64, x33) + ((cast(u64, x6) * cast(u64, (arg1[9]))) + ((cast(u64, x5) * cast(u64, (arg1[8]))) + ((cast(u64, x4) * cast(u64, (arg1[7]))) + (cast(u64, (arg1[6])) * cast(u64, (arg1[6])))))));
    const x39 = cast(u32, (x38 >> 26));
    const x40 = cast(u32, (x38 & cast(u64, 0x3ffffff)));
    const x41 = ((cast(u64, x36) + (((cast(u64, x9) * cast(u64, (arg1[2]))) + (cast(u64, (arg1[1])) * cast(u64, (arg1[1])))) + (cast(u64, x34) << 10))) + (cast(u64, x40) * cast(u64, 0x3d10)));
    const x42 = cast(u32, (x41 >> 26));
    const x43 = cast(u32, (x41 & cast(u64, 0x3ffffff)));
    const x44 = (cast(u64, x39) + ((cast(u64, x5) * cast(u64, (arg1[9]))) + ((cast(u64, x4) * cast(u64, (arg1[8]))) + (cast(u64, x3) * cast(u64, (arg1[7]))))));
    const x45 = cast(u32, (x44 >> 26));
    const x46 = cast(u32, (x44 & cast(u64, 0x3ffffff)));
    const x47 = ((cast(u64, x42) + (((cast(u64, x9) * cast(u64, (arg1[3]))) + (cast(u64, x8) * cast(u64, (arg1[2])))) + (cast(u64, x40) << 10))) + (cast(u64, x46) * cast(u64, 0x3d10)));
    const x48 = cast(u32, (x47 >> 26));
    const x49 = cast(u32, (x47 & cast(u64, 0x3ffffff)));
    const x50 = (cast(u64, x45) + ((cast(u64, x4) * cast(u64, (arg1[9]))) + ((cast(u64, x3) * cast(u64, (arg1[8]))) + (cast(u64, (arg1[7])) * cast(u64, (arg1[7]))))));
    const x51 = cast(u32, (x50 >> 26));
    const x52 = cast(u32, (x50 & cast(u64, 0x3ffffff)));
    const x53 = ((cast(u64, x48) + (((cast(u64, x9) * cast(u64, (arg1[4]))) + ((cast(u64, x8) * cast(u64, (arg1[3]))) + (cast(u64, (arg1[2])) * cast(u64, (arg1[2]))))) + (cast(u64, x46) << 10))) + (cast(u64, x52) * cast(u64, 0x3d10)));
    const x54 = cast(u32, (x53 >> 26));
    const x55 = cast(u32, (x53 & cast(u64, 0x3ffffff)));
    const x56 = (cast(u64, x51) + ((cast(u64, x3) * cast(u64, (arg1[9]))) + (cast(u64, x2) * cast(u64, (arg1[8])))));
    const x57 = cast(u32, (x56 >> 26));
    const x58 = cast(u32, (x56 & cast(u64, 0x3ffffff)));
    const x59 = ((cast(u64, x54) + (((cast(u64, x9) * cast(u64, (arg1[5]))) + ((cast(u64, x8) * cast(u64, (arg1[4]))) + (cast(u64, x7) * cast(u64, (arg1[3]))))) + (cast(u64, x52) << 10))) + (cast(u64, x58) * cast(u64, 0x3d10)));
    const x60 = cast(u32, (x59 >> 26));
    const x61 = cast(u32, (x59 & cast(u64, 0x3ffffff)));
    const x62 = (cast(u64, x57) + ((cast(u64, x2) * cast(u64, (arg1[9]))) + (cast(u64, (arg1[8])) * cast(u64, (arg1[8])))));
    const x63 = cast(u32, (x62 >> 32));
    const x64 = ((cast(u64, x60) + (((cast(u64, x9) * cast(u64, (arg1[6]))) + ((cast(u64, x8) * cast(u64, (arg1[5]))) + ((cast(u64, x7) * cast(u64, (arg1[4]))) + (cast(u64, (arg1[3])) * cast(u64, (arg1[3])))))) + (cast(u64, x58) << 10))) + (cast(u64, cast(u32, x62)) * cast(u64, 0x3d10)));
    const x65 = cast(u32, (x64 >> 26));
    const x66 = cast(u32, (x64 & cast(u64, 0x3ffffff)));
    const x67 = ((cast(u64, x65) + (cast(u64, x15) + (cast(u64, cast(u32, x62)) << 10))) + (cast(u64, x63) * cast(u64, 0xf4400)));
    const x68 = cast(u32, (x67 >> 26));
    const x69 = cast(u32, (x67 & cast(u64, 0x3ffffff)));
    const x70 = (cast(u64, x68) + (cast(u64, x20) + (cast(u64, x63) << 16)));
    const x71 = cast(u32, (x70 >> 26));
    const x72 = cast(u32, (x70 & cast(u64, 0x3ffffff)));
    const x73 = (x71 + x25);
    out1[0] = x31;
    out1[1] = x37;
    out1[2] = x43;
    out1[3] = x49;
    out1[4] = x55;
    out1[5] = x61;
    out1[6] = x66;
    out1[7] = x69;
    out1[8] = x72;
    out1[9] = x73;
}
