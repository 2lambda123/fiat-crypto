// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --lang Go --relax-primitive-carry-to-bitwidth 32,64 --cmovznz-by-mul --internal-static --package-case flatcase --public-function-case UpperCamelCase --private-function-case camelCase --public-type-case UpperCamelCase --private-type-case camelCase --no-prefix-fiat --doc-newline-in-typedef-bounds --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-text-before-function-name '' --doc-text-before-type-name '' --package-name secp256k1dettman '' 32 10 22 '2^256 - 4294968273' mul32 square32
//
// curve description (via package name): secp256k1dettman
//
// machine_wordsize = 32 (from "32")
//
// requested operations: mul32, square32
//
// n = 10 (from "10")
//
// last_limb_width = 22 (from "22")
//
// s-c = 2^256 - [(1, 4294968273)] (from "2^256 - 4294968273")
//
// inbounds_multiplier: None (from "")
//
//
//
// Computed values:
//
//
//
//
package secp256k1dettman

// Mul32 multiplies two field elements.
//
// Postconditions:
//   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
//
// Input Bounds:
//   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
//   arg2: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
// Output Bounds:
//   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
func Mul32(out1 *[10]uint32, arg1 *[10]uint32, arg2 *[10]uint32) {
	x1 := ((uint64(arg1[8]) * uint64(arg2[9])) + (uint64(arg1[9]) * uint64(arg2[8])))
	x2 := uint32((x1 >> 26))
	x3 := (uint32(x1) & 0x3ffffff)
	x4 := (((uint64(arg1[0]) * uint64(arg2[7])) + ((uint64(arg1[1]) * uint64(arg2[6])) + ((uint64(arg1[2]) * uint64(arg2[5])) + ((uint64(arg1[3]) * uint64(arg2[4])) + ((uint64(arg1[4]) * uint64(arg2[3])) + ((uint64(arg1[5]) * uint64(arg2[2])) + ((uint64(arg1[6]) * uint64(arg2[1])) + (uint64(arg1[7]) * uint64(arg2[0]))))))))) + (uint64(x3) * uint64(0x3d10)))
	x5 := uint32((x4 >> 26))
	x6 := (uint32(x4) & 0x3ffffff)
	x7 := (uint64(x2) + (uint64(arg1[9]) * uint64(arg2[9])))
	x8 := uint32((x7 >> 32))
	x9 := ((uint64(x5) + (((uint64(arg1[0]) * uint64(arg2[8])) + ((uint64(arg1[1]) * uint64(arg2[7])) + ((uint64(arg1[2]) * uint64(arg2[6])) + ((uint64(arg1[3]) * uint64(arg2[5])) + ((uint64(arg1[4]) * uint64(arg2[4])) + ((uint64(arg1[5]) * uint64(arg2[3])) + ((uint64(arg1[6]) * uint64(arg2[2])) + ((uint64(arg1[7]) * uint64(arg2[1])) + (uint64(arg1[8]) * uint64(arg2[0])))))))))) + (uint64(x3) << 10))) + (uint64(uint32(x7)) * uint64(0x3d10)))
	x10 := uint32((x9 >> 26))
	x11 := (uint32(x9) & 0x3ffffff)
	x12 := ((uint64(x10) + (((uint64(arg1[0]) * uint64(arg2[9])) + ((uint64(arg1[1]) * uint64(arg2[8])) + ((uint64(arg1[2]) * uint64(arg2[7])) + ((uint64(arg1[3]) * uint64(arg2[6])) + ((uint64(arg1[4]) * uint64(arg2[5])) + ((uint64(arg1[5]) * uint64(arg2[4])) + ((uint64(arg1[6]) * uint64(arg2[3])) + ((uint64(arg1[7]) * uint64(arg2[2])) + ((uint64(arg1[8]) * uint64(arg2[1])) + (uint64(arg1[9]) * uint64(arg2[0]))))))))))) + (uint64(uint32(x7)) << 10))) + (uint64(x8) * uint64(0xf4400)))
	x13 := uint32((x12 >> 26))
	x14 := (uint32(x12) & 0x3ffffff)
	x15 := (x14 >> 22)
	x16 := (x14 & 0x3fffff)
	x17 := (uint64(x13) + (((uint64(arg1[1]) * uint64(arg2[9])) + ((uint64(arg1[2]) * uint64(arg2[8])) + ((uint64(arg1[3]) * uint64(arg2[7])) + ((uint64(arg1[4]) * uint64(arg2[6])) + ((uint64(arg1[5]) * uint64(arg2[5])) + ((uint64(arg1[6]) * uint64(arg2[4])) + ((uint64(arg1[7]) * uint64(arg2[3])) + ((uint64(arg1[8]) * uint64(arg2[2])) + (uint64(arg1[9]) * uint64(arg2[1])))))))))) + uint64((x8 << 16))))
	x18 := uint32((x17 >> 26))
	x19 := (uint32(x17) & 0x3ffffff)
	x20 := ((uint64(arg1[0]) * uint64(arg2[0])) + (uint64((x15 + (x19 << 4))) * uint64(0x3d1)))
	x21 := uint32((x20 >> 26))
	x22 := (uint32(x20) & 0x3ffffff)
	x23 := (uint64(x18) + ((uint64(arg1[2]) * uint64(arg2[9])) + ((uint64(arg1[3]) * uint64(arg2[8])) + ((uint64(arg1[4]) * uint64(arg2[7])) + ((uint64(arg1[5]) * uint64(arg2[6])) + ((uint64(arg1[6]) * uint64(arg2[5])) + ((uint64(arg1[7]) * uint64(arg2[4])) + ((uint64(arg1[8]) * uint64(arg2[3])) + (uint64(arg1[9]) * uint64(arg2[2]))))))))))
	x24 := uint32((x23 >> 26))
	x25 := (uint32(x23) & 0x3ffffff)
	x26 := ((uint64(x21) + (((uint64(arg1[0]) * uint64(arg2[1])) + (uint64(arg1[1]) * uint64(arg2[0]))) + (uint64((x15 + (x19 << 4))) << 6))) + (uint64(x25) * uint64(0x3d10)))
	x27 := uint32((x26 >> 26))
	x28 := (uint32(x26) & 0x3ffffff)
	x29 := (uint64(x24) + ((uint64(arg1[3]) * uint64(arg2[9])) + ((uint64(arg1[4]) * uint64(arg2[8])) + ((uint64(arg1[5]) * uint64(arg2[7])) + ((uint64(arg1[6]) * uint64(arg2[6])) + ((uint64(arg1[7]) * uint64(arg2[5])) + ((uint64(arg1[8]) * uint64(arg2[4])) + (uint64(arg1[9]) * uint64(arg2[3])))))))))
	x30 := uint32((x29 >> 26))
	x31 := (uint32(x29) & 0x3ffffff)
	x32 := ((uint64(x27) + (((uint64(arg1[0]) * uint64(arg2[2])) + ((uint64(arg1[1]) * uint64(arg2[1])) + (uint64(arg1[2]) * uint64(arg2[0])))) + (uint64(x25) << 10))) + (uint64(x31) * uint64(0x3d10)))
	x33 := uint32((x32 >> 26))
	x34 := (uint32(x32) & 0x3ffffff)
	x35 := (uint64(x30) + ((uint64(arg1[4]) * uint64(arg2[9])) + ((uint64(arg1[5]) * uint64(arg2[8])) + ((uint64(arg1[6]) * uint64(arg2[7])) + ((uint64(arg1[7]) * uint64(arg2[6])) + ((uint64(arg1[8]) * uint64(arg2[5])) + (uint64(arg1[9]) * uint64(arg2[4]))))))))
	x36 := uint32((x35 >> 26))
	x37 := (uint32(x35) & 0x3ffffff)
	x38 := ((uint64(x33) + (((uint64(arg1[0]) * uint64(arg2[3])) + ((uint64(arg1[1]) * uint64(arg2[2])) + ((uint64(arg1[2]) * uint64(arg2[1])) + (uint64(arg1[3]) * uint64(arg2[0]))))) + (uint64(x31) << 10))) + (uint64(x37) * uint64(0x3d10)))
	x39 := uint32((x38 >> 26))
	x40 := (uint32(x38) & 0x3ffffff)
	x41 := (uint64(x36) + ((uint64(arg1[5]) * uint64(arg2[9])) + ((uint64(arg1[6]) * uint64(arg2[8])) + ((uint64(arg1[7]) * uint64(arg2[7])) + ((uint64(arg1[8]) * uint64(arg2[6])) + (uint64(arg1[9]) * uint64(arg2[5])))))))
	x42 := uint32((x41 >> 26))
	x43 := (uint32(x41) & 0x3ffffff)
	x44 := ((uint64(x39) + (((uint64(arg1[0]) * uint64(arg2[4])) + ((uint64(arg1[1]) * uint64(arg2[3])) + ((uint64(arg1[2]) * uint64(arg2[2])) + ((uint64(arg1[3]) * uint64(arg2[1])) + (uint64(arg1[4]) * uint64(arg2[0])))))) + (uint64(x37) << 10))) + (uint64(x43) * uint64(0x3d10)))
	x45 := uint32((x44 >> 26))
	x46 := (uint32(x44) & 0x3ffffff)
	x47 := (uint64(x42) + ((uint64(arg1[6]) * uint64(arg2[9])) + ((uint64(arg1[7]) * uint64(arg2[8])) + ((uint64(arg1[8]) * uint64(arg2[7])) + (uint64(arg1[9]) * uint64(arg2[6]))))))
	x48 := uint32((x47 >> 26))
	x49 := (uint32(x47) & 0x3ffffff)
	x50 := ((uint64(x45) + (((uint64(arg1[0]) * uint64(arg2[5])) + ((uint64(arg1[1]) * uint64(arg2[4])) + ((uint64(arg1[2]) * uint64(arg2[3])) + ((uint64(arg1[3]) * uint64(arg2[2])) + ((uint64(arg1[4]) * uint64(arg2[1])) + (uint64(arg1[5]) * uint64(arg2[0]))))))) + (uint64(x43) << 10))) + (uint64(x49) * uint64(0x3d10)))
	x51 := uint32((x50 >> 26))
	x52 := (uint32(x50) & 0x3ffffff)
	x53 := (uint64(x48) + ((uint64(arg1[7]) * uint64(arg2[9])) + ((uint64(arg1[8]) * uint64(arg2[8])) + (uint64(arg1[9]) * uint64(arg2[7])))))
	x54 := uint32((x53 >> 32))
	x55 := ((uint64(x51) + (((uint64(arg1[0]) * uint64(arg2[6])) + ((uint64(arg1[1]) * uint64(arg2[5])) + ((uint64(arg1[2]) * uint64(arg2[4])) + ((uint64(arg1[3]) * uint64(arg2[3])) + ((uint64(arg1[4]) * uint64(arg2[2])) + ((uint64(arg1[5]) * uint64(arg2[1])) + (uint64(arg1[6]) * uint64(arg2[0])))))))) + (uint64(x49) << 10))) + (uint64(uint32(x53)) * uint64(0x3d10)))
	x56 := uint32((x55 >> 26))
	x57 := (uint32(x55) & 0x3ffffff)
	x58 := ((uint64(x56) + (uint64(x6) + (uint64(uint32(x53)) << 10))) + (uint64(x54) * uint64(0xf4400)))
	x59 := uint32((x58 >> 26))
	x60 := (uint32(x58) & 0x3ffffff)
	x61 := (uint64(x59) + (uint64(x11) + (uint64(x54) << 16)))
	x62 := uint32((x61 >> 26))
	x63 := (uint32(x61) & 0x3ffffff)
	x64 := (x62 + x16)
	out1[0] = x22
	out1[1] = x28
	out1[2] = x34
	out1[3] = x40
	out1[4] = x46
	out1[5] = x52
	out1[6] = x57
	out1[7] = x60
	out1[8] = x63
	out1[9] = x64
}

// Square32 squares a field element.
//
// Postconditions:
//   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
//
// Input Bounds:
//   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
// Output Bounds:
//   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
func Square32(out1 *[10]uint32, arg1 *[10]uint32) {
	x1 := (arg1[8] * 0x2)
	x2 := (arg1[7] * 0x2)
	x3 := (arg1[6] * 0x2)
	x4 := (arg1[5] * 0x2)
	x5 := (arg1[4] * 0x2)
	x6 := (arg1[3] * 0x2)
	x7 := (arg1[2] * 0x2)
	x8 := (arg1[1] * 0x2)
	x9 := (arg1[0] * 0x2)
	x10 := (uint64(x1) * uint64(arg1[9]))
	x11 := uint32((x10 >> 26))
	x12 := (uint32(x10) & 0x3ffffff)
	x13 := (((uint64(x9) * uint64(arg1[7])) + ((uint64(x8) * uint64(arg1[6])) + ((uint64(x7) * uint64(arg1[5])) + (uint64(x6) * uint64(arg1[4]))))) + (uint64(x12) * uint64(0x3d10)))
	x14 := uint32((x13 >> 26))
	x15 := (uint32(x13) & 0x3ffffff)
	x16 := (uint64(x11) + (uint64(arg1[9]) * uint64(arg1[9])))
	x17 := uint32((x16 >> 32))
	x18 := ((uint64(x14) + (((uint64(x9) * uint64(arg1[8])) + ((uint64(x8) * uint64(arg1[7])) + ((uint64(x7) * uint64(arg1[6])) + ((uint64(x6) * uint64(arg1[5])) + (uint64(arg1[4]) * uint64(arg1[4])))))) + (uint64(x12) << 10))) + (uint64(uint32(x16)) * uint64(0x3d10)))
	x19 := uint32((x18 >> 26))
	x20 := (uint32(x18) & 0x3ffffff)
	x21 := ((uint64(x19) + (((uint64(x9) * uint64(arg1[9])) + ((uint64(x8) * uint64(arg1[8])) + ((uint64(x7) * uint64(arg1[7])) + ((uint64(x6) * uint64(arg1[6])) + (uint64(x5) * uint64(arg1[5])))))) + (uint64(uint32(x16)) << 10))) + (uint64(x17) * uint64(0xf4400)))
	x22 := uint32((x21 >> 26))
	x23 := (uint32(x21) & 0x3ffffff)
	x24 := (x23 >> 22)
	x25 := (x23 & 0x3fffff)
	x26 := (uint64(x22) + (((uint64(x8) * uint64(arg1[9])) + ((uint64(x7) * uint64(arg1[8])) + ((uint64(x6) * uint64(arg1[7])) + ((uint64(x5) * uint64(arg1[6])) + (uint64(arg1[5]) * uint64(arg1[5])))))) + uint64((x17 << 16))))
	x27 := uint32((x26 >> 26))
	x28 := (uint32(x26) & 0x3ffffff)
	x29 := ((uint64(arg1[0]) * uint64(arg1[0])) + (uint64((x24 + (x28 << 4))) * uint64(0x3d1)))
	x30 := uint32((x29 >> 26))
	x31 := (uint32(x29) & 0x3ffffff)
	x32 := (uint64(x27) + ((uint64(x7) * uint64(arg1[9])) + ((uint64(x6) * uint64(arg1[8])) + ((uint64(x5) * uint64(arg1[7])) + (uint64(x4) * uint64(arg1[6]))))))
	x33 := uint32((x32 >> 26))
	x34 := (uint32(x32) & 0x3ffffff)
	x35 := ((uint64(x30) + ((uint64(x9) * uint64(arg1[1])) + (uint64((x24 + (x28 << 4))) << 6))) + (uint64(x34) * uint64(0x3d10)))
	x36 := uint32((x35 >> 26))
	x37 := (uint32(x35) & 0x3ffffff)
	x38 := (uint64(x33) + ((uint64(x6) * uint64(arg1[9])) + ((uint64(x5) * uint64(arg1[8])) + ((uint64(x4) * uint64(arg1[7])) + (uint64(arg1[6]) * uint64(arg1[6]))))))
	x39 := uint32((x38 >> 26))
	x40 := (uint32(x38) & 0x3ffffff)
	x41 := ((uint64(x36) + (((uint64(x9) * uint64(arg1[2])) + (uint64(arg1[1]) * uint64(arg1[1]))) + (uint64(x34) << 10))) + (uint64(x40) * uint64(0x3d10)))
	x42 := uint32((x41 >> 26))
	x43 := (uint32(x41) & 0x3ffffff)
	x44 := (uint64(x39) + ((uint64(x5) * uint64(arg1[9])) + ((uint64(x4) * uint64(arg1[8])) + (uint64(x3) * uint64(arg1[7])))))
	x45 := uint32((x44 >> 26))
	x46 := (uint32(x44) & 0x3ffffff)
	x47 := ((uint64(x42) + (((uint64(x9) * uint64(arg1[3])) + (uint64(x8) * uint64(arg1[2]))) + (uint64(x40) << 10))) + (uint64(x46) * uint64(0x3d10)))
	x48 := uint32((x47 >> 26))
	x49 := (uint32(x47) & 0x3ffffff)
	x50 := (uint64(x45) + ((uint64(x4) * uint64(arg1[9])) + ((uint64(x3) * uint64(arg1[8])) + (uint64(arg1[7]) * uint64(arg1[7])))))
	x51 := uint32((x50 >> 26))
	x52 := (uint32(x50) & 0x3ffffff)
	x53 := ((uint64(x48) + (((uint64(x9) * uint64(arg1[4])) + ((uint64(x8) * uint64(arg1[3])) + (uint64(arg1[2]) * uint64(arg1[2])))) + (uint64(x46) << 10))) + (uint64(x52) * uint64(0x3d10)))
	x54 := uint32((x53 >> 26))
	x55 := (uint32(x53) & 0x3ffffff)
	x56 := (uint64(x51) + ((uint64(x3) * uint64(arg1[9])) + (uint64(x2) * uint64(arg1[8]))))
	x57 := uint32((x56 >> 26))
	x58 := (uint32(x56) & 0x3ffffff)
	x59 := ((uint64(x54) + (((uint64(x9) * uint64(arg1[5])) + ((uint64(x8) * uint64(arg1[4])) + (uint64(x7) * uint64(arg1[3])))) + (uint64(x52) << 10))) + (uint64(x58) * uint64(0x3d10)))
	x60 := uint32((x59 >> 26))
	x61 := (uint32(x59) & 0x3ffffff)
	x62 := (uint64(x57) + ((uint64(x2) * uint64(arg1[9])) + (uint64(arg1[8]) * uint64(arg1[8]))))
	x63 := uint32((x62 >> 32))
	x64 := ((uint64(x60) + (((uint64(x9) * uint64(arg1[6])) + ((uint64(x8) * uint64(arg1[5])) + ((uint64(x7) * uint64(arg1[4])) + (uint64(arg1[3]) * uint64(arg1[3]))))) + (uint64(x58) << 10))) + (uint64(uint32(x62)) * uint64(0x3d10)))
	x65 := uint32((x64 >> 26))
	x66 := (uint32(x64) & 0x3ffffff)
	x67 := ((uint64(x65) + (uint64(x15) + (uint64(uint32(x62)) << 10))) + (uint64(x63) * uint64(0xf4400)))
	x68 := uint32((x67 >> 26))
	x69 := (uint32(x67) & 0x3ffffff)
	x70 := (uint64(x68) + (uint64(x20) + (uint64(x63) << 16)))
	x71 := uint32((x70 >> 26))
	x72 := (uint32(x70) & 0x3ffffff)
	x73 := (x71 + x25)
	out1[0] = x31
	out1[1] = x37
	out1[2] = x43
	out1[3] = x49
	out1[4] = x55
	out1[5] = x61
	out1[6] = x66
	out1[7] = x69
	out1[8] = x72
	out1[9] = x73
}
