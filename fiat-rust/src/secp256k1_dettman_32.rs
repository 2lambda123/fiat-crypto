//! Autogenerated: 'src/ExtractionOCaml/dettman_multiplication' --lang Rust --inline secp256k1_dettman 32 10 22 '2^256 - 4294968273' mul32 square32
//! curve description: secp256k1_dettman
//! machine_wordsize = 32 (from "32")
//! requested operations: mul32, square32
//! n = 10 (from "10")
//! last_limb_width = 22 (from "22")
//! s-c = 2^256 - [(1, 4294968273)] (from "2^256 - 4294968273")
//! inbounds_multiplier: None (from "")
//!
//! Computed values:
//!
//!

#![allow(unused_parens)]
#![allow(non_camel_case_types)]



/// The function fiat_secp256k1_dettman_mul32 multiplies two field elements.
///
/// Postconditions:
///   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg2) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
///   arg2: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
#[inline]
pub fn fiat_secp256k1_dettman_mul32(out1: &mut [u32; 10], arg1: &[u32; 10], arg2: &[u32; 10]) -> () {
  let x1: u64 = ((((arg1[8]) as u64) * ((arg2[9]) as u64)) + (((arg1[9]) as u64) * ((arg2[8]) as u64)));
  let x2: u32 = ((x1 >> 26) as u32);
  let x3: u32 = ((x1 & (0x3ffffff as u64)) as u32);
  let x4: u64 = (((((arg1[0]) as u64) * ((arg2[7]) as u64)) + ((((arg1[1]) as u64) * ((arg2[6]) as u64)) + ((((arg1[2]) as u64) * ((arg2[5]) as u64)) + ((((arg1[3]) as u64) * ((arg2[4]) as u64)) + ((((arg1[4]) as u64) * ((arg2[3]) as u64)) + ((((arg1[5]) as u64) * ((arg2[2]) as u64)) + ((((arg1[6]) as u64) * ((arg2[1]) as u64)) + (((arg1[7]) as u64) * ((arg2[0]) as u64))))))))) + ((x3 as u64) * (0x3d10 as u64)));
  let x5: u32 = ((x4 >> 26) as u32);
  let x6: u32 = ((x4 & (0x3ffffff as u64)) as u32);
  let x7: u64 = ((x2 as u64) + (((arg1[9]) as u64) * ((arg2[9]) as u64)));
  let x8: u32 = ((x7 >> 32) as u32);
  let x9: u64 = (((x5 as u64) + (((((arg1[0]) as u64) * ((arg2[8]) as u64)) + ((((arg1[1]) as u64) * ((arg2[7]) as u64)) + ((((arg1[2]) as u64) * ((arg2[6]) as u64)) + ((((arg1[3]) as u64) * ((arg2[5]) as u64)) + ((((arg1[4]) as u64) * ((arg2[4]) as u64)) + ((((arg1[5]) as u64) * ((arg2[3]) as u64)) + ((((arg1[6]) as u64) * ((arg2[2]) as u64)) + ((((arg1[7]) as u64) * ((arg2[1]) as u64)) + (((arg1[8]) as u64) * ((arg2[0]) as u64)))))))))) + ((x3 as u64) << 10))) + (((x7 as u32) as u64) * (0x3d10 as u64)));
  let x10: u32 = ((x9 >> 26) as u32);
  let x11: u32 = ((x9 & (0x3ffffff as u64)) as u32);
  let x12: u64 = (((x10 as u64) + (((((arg1[0]) as u64) * ((arg2[9]) as u64)) + ((((arg1[1]) as u64) * ((arg2[8]) as u64)) + ((((arg1[2]) as u64) * ((arg2[7]) as u64)) + ((((arg1[3]) as u64) * ((arg2[6]) as u64)) + ((((arg1[4]) as u64) * ((arg2[5]) as u64)) + ((((arg1[5]) as u64) * ((arg2[4]) as u64)) + ((((arg1[6]) as u64) * ((arg2[3]) as u64)) + ((((arg1[7]) as u64) * ((arg2[2]) as u64)) + ((((arg1[8]) as u64) * ((arg2[1]) as u64)) + (((arg1[9]) as u64) * ((arg2[0]) as u64))))))))))) + (((x7 as u32) as u64) << 10))) + ((x8 as u64) * (0xf4400 as u64)));
  let x13: u32 = ((x12 >> 26) as u32);
  let x14: u32 = ((x12 & (0x3ffffff as u64)) as u32);
  let x15: u32 = (x14 >> 22);
  let x16: u32 = (x14 & 0x3fffff);
  let x17: u64 = ((x13 as u64) + (((((arg1[1]) as u64) * ((arg2[9]) as u64)) + ((((arg1[2]) as u64) * ((arg2[8]) as u64)) + ((((arg1[3]) as u64) * ((arg2[7]) as u64)) + ((((arg1[4]) as u64) * ((arg2[6]) as u64)) + ((((arg1[5]) as u64) * ((arg2[5]) as u64)) + ((((arg1[6]) as u64) * ((arg2[4]) as u64)) + ((((arg1[7]) as u64) * ((arg2[3]) as u64)) + ((((arg1[8]) as u64) * ((arg2[2]) as u64)) + (((arg1[9]) as u64) * ((arg2[1]) as u64)))))))))) + ((x8 << 16) as u64)));
  let x18: u32 = ((x17 >> 26) as u32);
  let x19: u32 = ((x17 & (0x3ffffff as u64)) as u32);
  let x20: u64 = ((((arg1[0]) as u64) * ((arg2[0]) as u64)) + (((x15 + (x19 << 4)) as u64) * (0x3d1 as u64)));
  let x21: u32 = ((x20 >> 26) as u32);
  let x22: u32 = ((x20 & (0x3ffffff as u64)) as u32);
  let x23: u64 = ((x18 as u64) + ((((arg1[2]) as u64) * ((arg2[9]) as u64)) + ((((arg1[3]) as u64) * ((arg2[8]) as u64)) + ((((arg1[4]) as u64) * ((arg2[7]) as u64)) + ((((arg1[5]) as u64) * ((arg2[6]) as u64)) + ((((arg1[6]) as u64) * ((arg2[5]) as u64)) + ((((arg1[7]) as u64) * ((arg2[4]) as u64)) + ((((arg1[8]) as u64) * ((arg2[3]) as u64)) + (((arg1[9]) as u64) * ((arg2[2]) as u64))))))))));
  let x24: u32 = ((x23 >> 26) as u32);
  let x25: u32 = ((x23 & (0x3ffffff as u64)) as u32);
  let x26: u64 = (((x21 as u64) + (((((arg1[0]) as u64) * ((arg2[1]) as u64)) + (((arg1[1]) as u64) * ((arg2[0]) as u64))) + (((x15 + (x19 << 4)) as u64) << 6))) + ((x25 as u64) * (0x3d10 as u64)));
  let x27: u32 = ((x26 >> 26) as u32);
  let x28: u32 = ((x26 & (0x3ffffff as u64)) as u32);
  let x29: u64 = ((x24 as u64) + ((((arg1[3]) as u64) * ((arg2[9]) as u64)) + ((((arg1[4]) as u64) * ((arg2[8]) as u64)) + ((((arg1[5]) as u64) * ((arg2[7]) as u64)) + ((((arg1[6]) as u64) * ((arg2[6]) as u64)) + ((((arg1[7]) as u64) * ((arg2[5]) as u64)) + ((((arg1[8]) as u64) * ((arg2[4]) as u64)) + (((arg1[9]) as u64) * ((arg2[3]) as u64)))))))));
  let x30: u32 = ((x29 >> 26) as u32);
  let x31: u32 = ((x29 & (0x3ffffff as u64)) as u32);
  let x32: u64 = (((x27 as u64) + (((((arg1[0]) as u64) * ((arg2[2]) as u64)) + ((((arg1[1]) as u64) * ((arg2[1]) as u64)) + (((arg1[2]) as u64) * ((arg2[0]) as u64)))) + ((x25 as u64) << 10))) + ((x31 as u64) * (0x3d10 as u64)));
  let x33: u32 = ((x32 >> 26) as u32);
  let x34: u32 = ((x32 & (0x3ffffff as u64)) as u32);
  let x35: u64 = ((x30 as u64) + ((((arg1[4]) as u64) * ((arg2[9]) as u64)) + ((((arg1[5]) as u64) * ((arg2[8]) as u64)) + ((((arg1[6]) as u64) * ((arg2[7]) as u64)) + ((((arg1[7]) as u64) * ((arg2[6]) as u64)) + ((((arg1[8]) as u64) * ((arg2[5]) as u64)) + (((arg1[9]) as u64) * ((arg2[4]) as u64))))))));
  let x36: u32 = ((x35 >> 26) as u32);
  let x37: u32 = ((x35 & (0x3ffffff as u64)) as u32);
  let x38: u64 = (((x33 as u64) + (((((arg1[0]) as u64) * ((arg2[3]) as u64)) + ((((arg1[1]) as u64) * ((arg2[2]) as u64)) + ((((arg1[2]) as u64) * ((arg2[1]) as u64)) + (((arg1[3]) as u64) * ((arg2[0]) as u64))))) + ((x31 as u64) << 10))) + ((x37 as u64) * (0x3d10 as u64)));
  let x39: u32 = ((x38 >> 26) as u32);
  let x40: u32 = ((x38 & (0x3ffffff as u64)) as u32);
  let x41: u64 = ((x36 as u64) + ((((arg1[5]) as u64) * ((arg2[9]) as u64)) + ((((arg1[6]) as u64) * ((arg2[8]) as u64)) + ((((arg1[7]) as u64) * ((arg2[7]) as u64)) + ((((arg1[8]) as u64) * ((arg2[6]) as u64)) + (((arg1[9]) as u64) * ((arg2[5]) as u64)))))));
  let x42: u32 = ((x41 >> 26) as u32);
  let x43: u32 = ((x41 & (0x3ffffff as u64)) as u32);
  let x44: u64 = (((x39 as u64) + (((((arg1[0]) as u64) * ((arg2[4]) as u64)) + ((((arg1[1]) as u64) * ((arg2[3]) as u64)) + ((((arg1[2]) as u64) * ((arg2[2]) as u64)) + ((((arg1[3]) as u64) * ((arg2[1]) as u64)) + (((arg1[4]) as u64) * ((arg2[0]) as u64)))))) + ((x37 as u64) << 10))) + ((x43 as u64) * (0x3d10 as u64)));
  let x45: u32 = ((x44 >> 26) as u32);
  let x46: u32 = ((x44 & (0x3ffffff as u64)) as u32);
  let x47: u64 = ((x42 as u64) + ((((arg1[6]) as u64) * ((arg2[9]) as u64)) + ((((arg1[7]) as u64) * ((arg2[8]) as u64)) + ((((arg1[8]) as u64) * ((arg2[7]) as u64)) + (((arg1[9]) as u64) * ((arg2[6]) as u64))))));
  let x48: u32 = ((x47 >> 26) as u32);
  let x49: u32 = ((x47 & (0x3ffffff as u64)) as u32);
  let x50: u64 = (((x45 as u64) + (((((arg1[0]) as u64) * ((arg2[5]) as u64)) + ((((arg1[1]) as u64) * ((arg2[4]) as u64)) + ((((arg1[2]) as u64) * ((arg2[3]) as u64)) + ((((arg1[3]) as u64) * ((arg2[2]) as u64)) + ((((arg1[4]) as u64) * ((arg2[1]) as u64)) + (((arg1[5]) as u64) * ((arg2[0]) as u64))))))) + ((x43 as u64) << 10))) + ((x49 as u64) * (0x3d10 as u64)));
  let x51: u32 = ((x50 >> 26) as u32);
  let x52: u32 = ((x50 & (0x3ffffff as u64)) as u32);
  let x53: u64 = ((x48 as u64) + ((((arg1[7]) as u64) * ((arg2[9]) as u64)) + ((((arg1[8]) as u64) * ((arg2[8]) as u64)) + (((arg1[9]) as u64) * ((arg2[7]) as u64)))));
  let x54: u32 = ((x53 >> 32) as u32);
  let x55: u64 = (((x51 as u64) + (((((arg1[0]) as u64) * ((arg2[6]) as u64)) + ((((arg1[1]) as u64) * ((arg2[5]) as u64)) + ((((arg1[2]) as u64) * ((arg2[4]) as u64)) + ((((arg1[3]) as u64) * ((arg2[3]) as u64)) + ((((arg1[4]) as u64) * ((arg2[2]) as u64)) + ((((arg1[5]) as u64) * ((arg2[1]) as u64)) + (((arg1[6]) as u64) * ((arg2[0]) as u64)))))))) + ((x49 as u64) << 10))) + (((x53 as u32) as u64) * (0x3d10 as u64)));
  let x56: u32 = ((x55 >> 26) as u32);
  let x57: u32 = ((x55 & (0x3ffffff as u64)) as u32);
  let x58: u64 = (((x56 as u64) + ((x6 as u64) + (((x53 as u32) as u64) << 10))) + ((x54 as u64) * (0xf4400 as u64)));
  let x59: u32 = ((x58 >> 26) as u32);
  let x60: u32 = ((x58 & (0x3ffffff as u64)) as u32);
  let x61: u64 = ((x59 as u64) + ((x11 as u64) + ((x54 as u64) << 16)));
  let x62: u32 = ((x61 >> 26) as u32);
  let x63: u32 = ((x61 & (0x3ffffff as u64)) as u32);
  let x64: u32 = (x62 + x16);
  out1[0] = x22;
  out1[1] = x28;
  out1[2] = x34;
  out1[3] = x40;
  out1[4] = x46;
  out1[5] = x52;
  out1[6] = x57;
  out1[7] = x60;
  out1[8] = x63;
  out1[9] = x64;
}

/// The function fiat_secp256k1_dettman_square32 squares a field element.
///
/// Postconditions:
///   eval out1 mod 115792089237316195423570985008687907853269984665640564039457584007908834671663 = (eval arg1 * eval arg1) mod 115792089237316195423570985008687907853269984665640564039457584007908834671663
///
/// Input Bounds:
///   arg1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7ffffe]]
/// Output Bounds:
///   out1: [[0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x7fffffe], [0x0 ~> 0x5fffff]]
#[inline]
pub fn fiat_secp256k1_dettman_square32(out1: &mut [u32; 10], arg1: &[u32; 10]) -> () {
  let x1: u32 = ((arg1[8]) * 0x2);
  let x2: u32 = ((arg1[7]) * 0x2);
  let x3: u32 = ((arg1[6]) * 0x2);
  let x4: u32 = ((arg1[5]) * 0x2);
  let x5: u32 = ((arg1[4]) * 0x2);
  let x6: u32 = ((arg1[3]) * 0x2);
  let x7: u32 = ((arg1[2]) * 0x2);
  let x8: u32 = ((arg1[1]) * 0x2);
  let x9: u32 = ((arg1[0]) * 0x2);
  let x10: u64 = ((x1 as u64) * ((arg1[9]) as u64));
  let x11: u32 = ((x10 >> 26) as u32);
  let x12: u32 = ((x10 & (0x3ffffff as u64)) as u32);
  let x13: u64 = ((((x9 as u64) * ((arg1[7]) as u64)) + (((x8 as u64) * ((arg1[6]) as u64)) + (((x7 as u64) * ((arg1[5]) as u64)) + ((x6 as u64) * ((arg1[4]) as u64))))) + ((x12 as u64) * (0x3d10 as u64)));
  let x14: u32 = ((x13 >> 26) as u32);
  let x15: u32 = ((x13 & (0x3ffffff as u64)) as u32);
  let x16: u64 = ((x11 as u64) + (((arg1[9]) as u64) * ((arg1[9]) as u64)));
  let x17: u32 = ((x16 >> 32) as u32);
  let x18: u64 = (((x14 as u64) + ((((x9 as u64) * ((arg1[8]) as u64)) + (((x8 as u64) * ((arg1[7]) as u64)) + (((x7 as u64) * ((arg1[6]) as u64)) + (((x6 as u64) * ((arg1[5]) as u64)) + (((arg1[4]) as u64) * ((arg1[4]) as u64)))))) + ((x12 as u64) << 10))) + (((x16 as u32) as u64) * (0x3d10 as u64)));
  let x19: u32 = ((x18 >> 26) as u32);
  let x20: u32 = ((x18 & (0x3ffffff as u64)) as u32);
  let x21: u64 = (((x19 as u64) + ((((x9 as u64) * ((arg1[9]) as u64)) + (((x8 as u64) * ((arg1[8]) as u64)) + (((x7 as u64) * ((arg1[7]) as u64)) + (((x6 as u64) * ((arg1[6]) as u64)) + ((x5 as u64) * ((arg1[5]) as u64)))))) + (((x16 as u32) as u64) << 10))) + ((x17 as u64) * (0xf4400 as u64)));
  let x22: u32 = ((x21 >> 26) as u32);
  let x23: u32 = ((x21 & (0x3ffffff as u64)) as u32);
  let x24: u32 = (x23 >> 22);
  let x25: u32 = (x23 & 0x3fffff);
  let x26: u64 = ((x22 as u64) + ((((x8 as u64) * ((arg1[9]) as u64)) + (((x7 as u64) * ((arg1[8]) as u64)) + (((x6 as u64) * ((arg1[7]) as u64)) + (((x5 as u64) * ((arg1[6]) as u64)) + (((arg1[5]) as u64) * ((arg1[5]) as u64)))))) + ((x17 << 16) as u64)));
  let x27: u32 = ((x26 >> 26) as u32);
  let x28: u32 = ((x26 & (0x3ffffff as u64)) as u32);
  let x29: u64 = ((((arg1[0]) as u64) * ((arg1[0]) as u64)) + (((x24 + (x28 << 4)) as u64) * (0x3d1 as u64)));
  let x30: u32 = ((x29 >> 26) as u32);
  let x31: u32 = ((x29 & (0x3ffffff as u64)) as u32);
  let x32: u64 = ((x27 as u64) + (((x7 as u64) * ((arg1[9]) as u64)) + (((x6 as u64) * ((arg1[8]) as u64)) + (((x5 as u64) * ((arg1[7]) as u64)) + ((x4 as u64) * ((arg1[6]) as u64))))));
  let x33: u32 = ((x32 >> 26) as u32);
  let x34: u32 = ((x32 & (0x3ffffff as u64)) as u32);
  let x35: u64 = (((x30 as u64) + (((x9 as u64) * ((arg1[1]) as u64)) + (((x24 + (x28 << 4)) as u64) << 6))) + ((x34 as u64) * (0x3d10 as u64)));
  let x36: u32 = ((x35 >> 26) as u32);
  let x37: u32 = ((x35 & (0x3ffffff as u64)) as u32);
  let x38: u64 = ((x33 as u64) + (((x6 as u64) * ((arg1[9]) as u64)) + (((x5 as u64) * ((arg1[8]) as u64)) + (((x4 as u64) * ((arg1[7]) as u64)) + (((arg1[6]) as u64) * ((arg1[6]) as u64))))));
  let x39: u32 = ((x38 >> 26) as u32);
  let x40: u32 = ((x38 & (0x3ffffff as u64)) as u32);
  let x41: u64 = (((x36 as u64) + ((((x9 as u64) * ((arg1[2]) as u64)) + (((arg1[1]) as u64) * ((arg1[1]) as u64))) + ((x34 as u64) << 10))) + ((x40 as u64) * (0x3d10 as u64)));
  let x42: u32 = ((x41 >> 26) as u32);
  let x43: u32 = ((x41 & (0x3ffffff as u64)) as u32);
  let x44: u64 = ((x39 as u64) + (((x5 as u64) * ((arg1[9]) as u64)) + (((x4 as u64) * ((arg1[8]) as u64)) + ((x3 as u64) * ((arg1[7]) as u64)))));
  let x45: u32 = ((x44 >> 26) as u32);
  let x46: u32 = ((x44 & (0x3ffffff as u64)) as u32);
  let x47: u64 = (((x42 as u64) + ((((x9 as u64) * ((arg1[3]) as u64)) + ((x8 as u64) * ((arg1[2]) as u64))) + ((x40 as u64) << 10))) + ((x46 as u64) * (0x3d10 as u64)));
  let x48: u32 = ((x47 >> 26) as u32);
  let x49: u32 = ((x47 & (0x3ffffff as u64)) as u32);
  let x50: u64 = ((x45 as u64) + (((x4 as u64) * ((arg1[9]) as u64)) + (((x3 as u64) * ((arg1[8]) as u64)) + (((arg1[7]) as u64) * ((arg1[7]) as u64)))));
  let x51: u32 = ((x50 >> 26) as u32);
  let x52: u32 = ((x50 & (0x3ffffff as u64)) as u32);
  let x53: u64 = (((x48 as u64) + ((((x9 as u64) * ((arg1[4]) as u64)) + (((x8 as u64) * ((arg1[3]) as u64)) + (((arg1[2]) as u64) * ((arg1[2]) as u64)))) + ((x46 as u64) << 10))) + ((x52 as u64) * (0x3d10 as u64)));
  let x54: u32 = ((x53 >> 26) as u32);
  let x55: u32 = ((x53 & (0x3ffffff as u64)) as u32);
  let x56: u64 = ((x51 as u64) + (((x3 as u64) * ((arg1[9]) as u64)) + ((x2 as u64) * ((arg1[8]) as u64))));
  let x57: u32 = ((x56 >> 26) as u32);
  let x58: u32 = ((x56 & (0x3ffffff as u64)) as u32);
  let x59: u64 = (((x54 as u64) + ((((x9 as u64) * ((arg1[5]) as u64)) + (((x8 as u64) * ((arg1[4]) as u64)) + ((x7 as u64) * ((arg1[3]) as u64)))) + ((x52 as u64) << 10))) + ((x58 as u64) * (0x3d10 as u64)));
  let x60: u32 = ((x59 >> 26) as u32);
  let x61: u32 = ((x59 & (0x3ffffff as u64)) as u32);
  let x62: u64 = ((x57 as u64) + (((x2 as u64) * ((arg1[9]) as u64)) + (((arg1[8]) as u64) * ((arg1[8]) as u64))));
  let x63: u32 = ((x62 >> 32) as u32);
  let x64: u64 = (((x60 as u64) + ((((x9 as u64) * ((arg1[6]) as u64)) + (((x8 as u64) * ((arg1[5]) as u64)) + (((x7 as u64) * ((arg1[4]) as u64)) + (((arg1[3]) as u64) * ((arg1[3]) as u64))))) + ((x58 as u64) << 10))) + (((x62 as u32) as u64) * (0x3d10 as u64)));
  let x65: u32 = ((x64 >> 26) as u32);
  let x66: u32 = ((x64 & (0x3ffffff as u64)) as u32);
  let x67: u64 = (((x65 as u64) + ((x15 as u64) + (((x62 as u32) as u64) << 10))) + ((x63 as u64) * (0xf4400 as u64)));
  let x68: u32 = ((x67 >> 26) as u32);
  let x69: u32 = ((x67 & (0x3ffffff as u64)) as u32);
  let x70: u64 = ((x68 as u64) + ((x20 as u64) + ((x63 as u64) << 16)));
  let x71: u32 = ((x70 >> 26) as u32);
  let x72: u32 = ((x70 & (0x3ffffff as u64)) as u32);
  let x73: u32 = (x71 + x25);
  out1[0] = x31;
  out1[1] = x37;
  out1[2] = x43;
  out1[3] = x49;
  out1[4] = x55;
  out1[5] = x61;
  out1[6] = x66;
  out1[7] = x69;
  out1[8] = x72;
  out1[9] = x73;
}
